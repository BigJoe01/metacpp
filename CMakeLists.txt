CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(metacpp)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
INCLUDE("${CMAKE_SOURCE_DIR}/cmake/Macros/ScanSources.cmake")
SET(VERSION_FILE "${CMAKE_SOURCE_DIR}/version")
SET(README_FILE "${CMAKE_SOURCE_DIR}/README.md")

SET(SRC_DIRS
    "${CMAKE_SOURCE_DIR}/src"
    "${CMAKE_SOURCE_DIR}/src/utils"
    "${CMAKE_SOURCE_DIR}/src/core"
    "${CMAKE_SOURCE_DIR}/src/sql"
    "${CMAKE_SOURCE_DIR}/src/sql/connectors"
)

FIND_PACKAGE(JsonCpp)
IF(JSONCPP_FOUND)
    LIST(APPEND LIBS ${JSONCPP_LIBRARIES})
    LIST(APPEND INCLUDE_DIRS ${JSONCPP_INCLUDE_DIR})
    LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/json")
    ADD_DEFINITIONS(-DHAVE_JSONCPP)
ENDIF(JSONCPP_FOUND)

FIND_PACKAGE(Sqlite3)
IF(SQLITE3_FOUND)
    LIST(APPEND LIBS ${SQLITE3_LIBRARIES})
    LIST(APPEND INCLUDE_DIRS ${SQLITE3_INCLUDE_DIR})
    LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/sql/connectors/sqlite3")
    ADD_DEFINITIONS(-DHAVE_SQLITE3)
ENDIF(SQLITE3_FOUND)

FIND_PACKAGE(PostgreSQL)
IF(PostgreSQL_FOUND)
    LIST(APPEND LIBS ${POSTGRES_LIBRARY})
    LIST(APPEND INCLUDE_DIRS ${POSTGRES_INCLUDE_DIR})
    LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/sql/connectors/postgres")
    ADD_DEFINITIONS(-DHAVE_POSTGRES)
ENDIF(PostgreSQL_FOUND)

IF(UNIX)
    FIND_PACKAGE(Iconv REQUIRED)
    LIST(APPEND LIBS ${ICONV_LIBRARIES})
    LIST(APPEND INCLUDE_DIRS ${ICONV_INCLUDE_DIR})
ENDIF(UNIX)

# read version information
FILE(STRINGS ${VERSION_FILE} PRO_VERSION)

LIST(APPEND INCLUDE_DIRS ${SRC_DIRS})

IF (CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-Wall -Wextra -Wno-invalid-offsetof -std=c++11")
ENDIF()

ADD_SOURCE_DIRECTORY(SOURCES HEADERS "${SRC_DIRS}")

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})
ADD_DEFINITIONS(-DVERSION=${PRO_VERSION})

ADD_LIBRARY(${CMAKE_PROJECT_NAME} ${SOURCES} ${HEADERS} ${VERSION_FILE} ${README_FILE})

TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${LIBS})

FIND_PACKAGE(GTest)
# configure tests
IF(GTEST_FOUND)
    ENABLE_TESTING()
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

    SET(TEST_SRC_DIRS "test")

    ADD_SOURCE_DIRECTORY(TEST_SOURCES TEST_HEADERS "${TEST_SRC_DIRS}")

    ADD_EXECUTABLE(metacpp-test ${TEST_SOURCES} ${TEST_HEADERS})
    TARGET_LINK_LIBRARIES(metacpp-test ${CMAKE_PROJECT_NAME} ${GTEST_LIBRARIES})

    ADD_TEST("StringTest" "${CMAKE_BINARY_DIR}/metacpp-test" "--gtest_filter=StringTest*")
    ADD_TEST("ObjectTest" "${CMAKE_BINARY_DIR}/metacpp-test" "--gtest_filter=ObjectTest*")
    ADD_TEST("SqlTest" "${CMAKE_BINARY_DIR}/metacpp-test" "--gtest_filter=SqlTest*")
    ADD_TEST("VariantTest" "${CMAKE_BINARY_DIR}/metacpp-test" "--gtest_filter=*VariantTest*")
ENDIF(GTEST_FOUND)

INSTALL(FILES ${HEADERS} DESTINATION "include/metacpp")
INSTALL(TARGETS ${CMAKE_PROJECT_NAME} LIBRARY DESTINATION "lib" ARCHIVE DESTINATION "lib")
