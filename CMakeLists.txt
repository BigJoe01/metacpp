CMAKE_MINIMUM_REQUIRED(VERSION 2.8)
PROJECT(metacpp)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
INCLUDE("${CMAKE_SOURCE_DIR}/cmake/Macros/ScanSources.cmake")
SET(VERSION_FILE "${CMAKE_SOURCE_DIR}/version")
SET(README_FILE "${CMAKE_SOURCE_DIR}/README.md")

SET(SRC_DIRS
    "${CMAKE_SOURCE_DIR}/src"
    "${CMAKE_SOURCE_DIR}/src/utils"
    "${CMAKE_SOURCE_DIR}/src/core"
    "${CMAKE_SOURCE_DIR}/src/db"
    "${CMAKE_SOURCE_DIR}/src/serialization"
    "${CMAKE_SOURCE_DIR}/src/db/sql"
    "${CMAKE_SOURCE_DIR}/src/db/sql/connectors"
    "${CMAKE_SOURCE_DIR}/src/scripting"
)

IF (MSVC)
    LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/compat")
ENDIF(MSVC)

FIND_PACKAGE(JsonCpp)
IF(JSONCPP_FOUND)
    ADD_SOURCE_DIRECTORY(JSON_SOURCES JSON_HEADERS "${CMAKE_SOURCE_DIR}/src/serialization/json")
    LIST(APPEND INCLUDE_DIRS ${JSONCPP_INCLUDE_DIR} "${CMAKE_SOURCE_DIR}/src/serialization/json")
    SET(JSON_TARGET_NAME "${CMAKE_PROJECT_NAME}-json")
    ADD_LIBRARY(${JSON_TARGET_NAME} ${JSON_SOURCES} ${JSON_HEADERS})
    TARGET_LINK_LIBRARIES(${JSON_TARGET_NAME} ${CMAKE_PROJECT_NAME} ${LIBS} ${JSONCPP_LIBRARIES})
    SET(HAVE_JSONCPP 1)
ENDIF(JSONCPP_FOUND)

FIND_PACKAGE(Sqlite3)
IF(SQLITE3_FOUND)
    ADD_SOURCE_DIRECTORY(SQLITE3_CONNECTOR_SOURCES SQLITE3_CONNECTOR_HEADERS "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/sqlite3")
    LIST(APPEND INCLUDE_DIRS ${SQLITE3_INCLUDE_DIR} "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/sqlite3")
    SET(SQLITE3_CONNECTOR_TARGET_NAME "${CMAKE_PROJECT_NAME}-connector-sqlite3")
    ADD_LIBRARY(${SQLITE3_CONNECTOR_TARGET_NAME} ${SQLITE3_CONNECTOR_SOURCES} ${SQLITE3_CONNECTOR_HEADERS})
    TARGET_LINK_LIBRARIES(${SQLITE3_CONNECTOR_TARGET_NAME} ${CMAKE_PROJECT_NAME} ${LIBS} ${SQLITE3_LIBRARIES})
    SET(HAVE_SQLITE3 1)
ENDIF(SQLITE3_FOUND)

FIND_PACKAGE(PostgreSQL)
IF(PostgreSQL_FOUND)
    ADD_SOURCE_DIRECTORY(POSTGRES_CONNECTOR_SOURCES POSTGRES_CONNECTOR_HEADERS "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/postgres")
    LIST(APPEND INCLUDE_DIRS ${PostgreSQL_INCLUDE_DIRS} "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/postgres")
    SET(POSTGRES_CONNECTOR_TARGET_NAME "${CMAKE_PROJECT_NAME}-connector-postgres")
    ADD_LIBRARY(${POSTGRES_CONNECTOR_TARGET_NAME} ${POSTGRES_CONNECTOR_SOURCES} ${POSTGRES_CONNECTOR_HEADERS})
    TARGET_LINK_LIBRARIES(${POSTGRES_CONNECTOR_TARGET_NAME} ${CMAKE_PROJECT_NAME} ${LIBS} ${PostgreSQL_LIBRARIES})
    SET(HAVE_POSTGRES 1)
ENDIF(PostgreSQL_FOUND)

FIND_PACKAGE(MySQL)
IF (MYSQL_FOUND)
    ADD_SOURCE_DIRECTORY(MYSQL_CONNECTOR_SOURCES MYSQL_CONNECTOR_HEADERS "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/mysql")
    LIST(APPEND INCLUDE_DIRS ${MYSQL_INCLUDE_DIR} "${CMAKE_SOURCE_DIR}/src/db/sql/connectors/mysql")
    SET(MYSQL_CONNECTOR_TARGET_NAME "${CMAKE_PROJECT_NAME}-connector-mysql")
    ADD_LIBRARY(${MYSQL_CONNECTOR_TARGET_NAME} ${MYSQL_CONNECTOR_SOURCES} ${MYSQL_CONNECTOR_HEADERS})
    TARGET_LINK_LIBRARIES(${MYSQL_CONNECTOR_TARGET_NAME} ${CMAKE_PROJECT_NAME} ${LIBS} ${MYSQL_CLIENT_LIBS})
    SET(HAVE_MYSQL 1)
ENDIF (MYSQL_FOUND)

#FIND_PACKAGE(MongoDB)
#IF(MongoDB_FOUND)
#    LIST(APPEND LIBS ${MongoDB_LIBRARIES})
#    LIST(APPEND INCLUDE_DIRS ${MongoDB_INCLUDE_DIR})
#    LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/serialization/bson")
#    #LIST(APPEND SRC_DIRS "${CMAKE_SOURCE_DIR}/src/db/nosql/connectors/mongodb")
#    SET(HAVE_MONGODB 1)
#ENDIF(MongoDB_FOUND)

FIND_PACKAGE(SpiderMonkey)
IF(SPIDERMONKEY_FOUND)
    ADD_SOURCE_DIRECTORY(JS_ENGINE_SOURCES JS_ENGINE_HEADERS "${CMAKE_SOURCE_DIR}/src/scripting/js")
    LIST(APPEND INCLUDE_DIRS ${SPIDERMONKEY_INCLUDE_DIR} "${CMAKE_SOURCE_DIR}/src/scripting/js")
    SET(JS_ENGINE_TARGET_NAME "${CMAKE_PROJECT_NAME}-scripting-js")
    ADD_LIBRARY(${JS_ENGINE_TARGET_NAME} ${JS_ENGINE_SOURCES} ${JS_ENGINE_HEADERS})
    TARGET_LINK_LIBRARIES(${JS_ENGINE_TARGET_NAME} ${CMAKE_PROJECT_NAME} ${LIBS} ${SPIDERMONKEY_LIBRARIES})
    SET(HAVE_SPIDERMONKEY 1)
ENDIF(SPIDERMONKEY_FOUND)

IF(UNIX)
    FIND_PACKAGE(Iconv REQUIRED)
    LIST(APPEND LIBS ${ICONV_LIBRARIES})
    LIST(APPEND INCLUDE_DIRS ${ICONV_INCLUDE_DIR})
ENDIF(UNIX)

# read version information
FILE(STRINGS ${VERSION_FILE} METACPP_VERSION_STRING)
STRING(REPLACE "." ";" PRO_VERSION_LIST ${METACPP_VERSION_STRING})
LIST(GET PRO_VERSION_LIST 0 METACPP_VERSION_MAJOR)
LIST(GET PRO_VERSION_LIST 1 METACPP_VERSION_MINOR)

LIST(APPEND INCLUDE_DIRS ${SRC_DIRS})
STRING(REPLACE ";" "\" \"" SOURCES_STR "${SRC_DIRS}")

IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    # using LLVM Clang
    LIST(APPEND CMAKE_CXX_FLAGS "-Wall -Wextra -Wno-unused-private-field -std=c++11")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
    # using GNUCXX
    LIST(APPEND CMAKE_CXX_FLAGS "-Wall -Wextra -Wno-invalid-offsetof -Wno-unused-parameter -Wno-ignored-qualifiers -std=c++11")
    LIST(APPEND LIBS "-lpthread" "-ldl -lz")
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
    # using Intel C++
ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "MSVC")
    # using Visual Studio C++
ENDIF()

CONFIGURE_FILE("${CMAKE_CURRENT_SOURCE_DIR}/config.h.in" "${CMAKE_CURRENT_BINARY_DIR}/config.h" @ONLY)
LIST(APPEND INCLUDE_DIRS ${CMAKE_CURRENT_BINARY_DIR})
LIST(APPEND HEADERS "${CMAKE_CURRENT_BINARY_DIR}/config.h")

ADD_SOURCE_DIRECTORY(SOURCES HEADERS "${SRC_DIRS}")

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})

ADD_LIBRARY(${CMAKE_PROJECT_NAME} ${SOURCES} ${HEADERS} ${VERSION_FILE} ${README_FILE})
LIST(APPEND INSTALL_HEADERS ${HEADERS})
LIST(APPEND INSTALL_TARGETS ${CMAKE_PROJECT_NAME})

TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${LIBS})

IF(JSONCPP_FOUND)
    LIST(APPEND INSTALL_HEADERS ${JSON_HEADERS})
    LIST(APPEND INSTALL_TARGETS ${JSON_TARGET_NAME})
ENDIF(JSONCPP_FOUND)

IF(SQLITE3_FOUND)
    LIST(APPEND INSTALL_HEADERS ${SQLITE3_CONNECTOR_HEADERS})
    LIST(APPEND INSTALL_TARGETS ${SQLITE3_CONNECTOR_TARGET_NAME})
ENDIF(SQLITE3_FOUND)

IF(PostgreSQL_FOUND)
    LIST(APPEND INSTALL_HEADERS "${POSTGRES_CONNECTOR_HEADERS}")
    LIST(APPEND INSTALL_TARGETS "${POSTGRES_CONNECTOR_TARGET_NAME}")
ENDIF(PostgreSQL_FOUND)

IF(MYSQL_FOUND)
    LIST(APPEND INSTALL_HEADERS ${MYSQL_CONNECTOR_HEADERS})
    LIST(APPEND INSTALL_TARGETS ${MYSQL_CONNECTOR_TARGET_NAME})
ENDIF(MYSQL_FOUND)

IF(SPIDERMONKEY_FOUND)
    LIST(APPEND INSTALL_HEADERS ${JS_ENGINE_HEADERS})
    LIST(APPEND INSTALL_TARGETS ${JS_ENGINE_TARGET_NAME})
ENDIF(SPIDERMONKEY_FOUND)

FIND_PACKAGE(GTest)
# configure tests
IF(GTEST_FOUND)
    ENABLE_TESTING()
    SET(TEST_SRC_DIRS "test")

    ADD_SOURCE_DIRECTORY(TEST_SOURCES TEST_HEADERS "${TEST_SRC_DIRS}")

    ADD_EXECUTABLE(${CMAKE_PROJECT_NAME}-test ${TEST_SOURCES} ${TEST_HEADERS})
    TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}-test ${INSTALL_TARGETS} ${GTEST_LIBRARIES})

    ADD_TEST("StringTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=StringTest*")
    ADD_TEST("ObjectTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=ObjectTest*")
    ADD_TEST("VariantTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=*VariantTest*")
    ADD_TEST("DateTimeTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=DateTimeTest*")
    ADD_TEST("SqlTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=SqlTest*")
    IF(SQLITE3_FOUND)
        ADD_TEST("SqliteTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=SqliteTest*")
    ENDIF(SQLITE3_FOUND)
    ADD_TEST("JSScriptTest" "${CMAKE_BINARY_DIR}/${CMAKE_PROJECT_NAME}-test" "--gtest_filter=JSScriptTest*")
ENDIF(GTEST_FOUND)

file(GLOB EXAMPLE_SOURCES "${CMAKE_SOURCE_DIR}/examples/*.cpp")

FOREACH(EXAMPLE_SOURCE ${EXAMPLE_SOURCES})
    GET_FILENAME_COMPONENT(EXAMPLE_NAME ${EXAMPLE_SOURCE} NAME_WE)
    ADD_EXECUTABLE(${EXAMPLE_NAME} EXCLUDE_FROM_ALL ${EXAMPLE_SOURCE})
    TARGET_LINK_LIBRARIES(${EXAMPLE_NAME} ${INSTALL_TARGETS})
    LIST(APPEND EXAMPLE_NAMES ${EXAMPLE_NAME})
ENDFOREACH(EXAMPLE_SOURCE)

ADD_CUSTOM_TARGET(examples)
ADD_DEPENDENCIES(examples ${EXAMPLE_NAMES})

FIND_PACKAGE(Doxygen)
IF(DOXYGEN_FOUND)
    CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
    ADD_CUSTOM_TARGET(doc
        ${DOXYGEN_EXECUTABLE} ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
        WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
        COMMENT "Generating API documentation with Doxygen" VERBATIM
    )
ENDIF(DOXYGEN_FOUND)

INSTALL(FILES ${INSTALL_HEADERS} DESTINATION "include/metacpp")
INSTALL(TARGETS ${INSTALL_TARGETS} LIBRARY DESTINATION "lib" ARCHIVE DESTINATION "lib")
