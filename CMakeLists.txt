CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

PROJECT(metacpp)
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")
INCLUDE("${CMAKE_SOURCE_DIR}/cmake/Macros/ScanSources.cmake")
SET(VERSION_FILE "${CMAKE_SOURCE_DIR}/version")

FIND_PACKAGE(JsonCpp REQUIRED)
FIND_PACKAGE(GTest)
LIST(APPEND LIBS ${JSONCPP_LIBRARIES})
LIST(APPEND INCLUDE_DIRS ${JSONCPP_INCLUDE_DIR})

IF(UNIX)
    FIND_PACKAGE(Iconv REQUIRED)
    LIST(APPEND LIBS ${ICONV_LIBRARIES})
    LIST(APPEND INCLUDE_DIRS ${ICONV_INCLUDE_DIR})
ENDIF(UNIX)

# read version information
FILE(STRINGS ${VERSION_FILE} PRO_VERSION)

SET(ORM_SRC_DIRS
    "${CMAKE_SOURCE_DIR}/src"
    "${CMAKE_SOURCE_DIR}/src/utils"
    "${CMAKE_SOURCE_DIR}/src/core"
    "${CMAKE_SOURCE_DIR}/src/json"
    "${CMAKE_SOURCE_DIR}/src/sql"
)

LIST(APPEND INCLUDE_DIRS ${ORM_SRC_DIRS})

SET(CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS} "-Wno-invalid-offsetof -std=c++11")

ADD_SOURCE_DIRECTORY(ORM_SOURCES ORM_HEADERS "${ORM_SRC_DIRS}")

INCLUDE_DIRECTORIES(${INCLUDE_DIRS})
ADD_DEFINITIONS(-DVERSION=${PRO_VERSION})

ADD_LIBRARY(${CMAKE_PROJECT_NAME} ${ORM_SOURCES} ${ORM_HEADERS} ${VERSION_FILE})

TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} ${LIBS})

# configure tests
IF(GTEST_FOUND)
    ENABLE_TESTING()
    INCLUDE_DIRECTORIES(${GTEST_INCLUDE_DIRS})

    SET(TEST_SRC_DIRS "test")

    ADD_SOURCE_DIRECTORY(TEST_SOURCES TEST_HEADERS "${TEST_SRC_DIRS}")

    ADD_EXECUTABLE(metacpp-test ${TEST_SOURCES} ${TEST_HEADERS})
    TARGET_LINK_LIBRARIES(metacpp-test ${CMAKE_PROJECT_NAME} ${GTEST_LIBRARIES})

    ADD_TEST("StringTest" "${CMAKE_BINARY_DIR}/metacpp-test" "--gtest_filter=\"StringTest*\"")
ENDIF(GTEST_FOUND)
